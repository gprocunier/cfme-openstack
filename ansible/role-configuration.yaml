---
- name: configure cfme appliance
  hosts: localhost
  connection: local
  tasks:      
    - name: initialize primary database
      become: true
      shell:
        cmd: |
           . /root/.bash_profile
           /opt/rh/cfme-gemset/bin/appliance_console_cli \
             --key \
             --standalone \
             --region 1 \
             --username root \
             --password="{{ dbPassword }}" \
             --dbdisk /dev/vdb || exit 1
      register: init_primary_db
      failed_when: init_primary_db.rc > 0
      when: cfme_node_type == 'primary-db'
    - name: wait for primary database to come up
      wait_for:
        host: "{{ primaryDb }}"
        port: 5432
        state: started
        delay: 0
        timeout: 600
      when: cfme_node_type != 'primary-db'
    - name: initialize primary web-portal
      become: true
      shell:
        cmd: |
           . /root/.bash_profile
           appliance_console_cli -K "{{ primaryDb }}" -s root -a {{ rootPassword }} -r 1 -U root -p "{{ dbPassword }}" -l /dev/vdb -h "{{ primaryDb }}" || exit 1
      register: init_primary_web
      failed_when: init_primary_web.rc > 0
      when: cfme_node_type == 'primary-web'
    - name: wait for the primary appliance to initialize the region
      postgresql_query:
        login_host: "{{ primaryDb }}"
        login_password: "{{ dbPassword }}"
        login_user: root
        db: vmdb_production
        query: SELECT hostname FROM miq_servers;
      register: test_db
      retries: 60
      delay: 10
      until: "test_db.query_result[0].hostname is defined and test_db.query_result[0].hostname == '{{ portalNode }}'"
      when: cfme_node_type != 'primary-web'
    - name: Enable replication on the primary node
      become: true
      shell:
        cmd: |
          . /root/.bash_profile
          while [[ -z $QUERY ]]
          do
            QUERY=$(su - postgres -c 'psql vmdb_production -t -c "select node_name from repmgr.nodes where node_id = 1"')
            /opt/rh/cfme-gemset/bin/appliance_console_cli \
              --username root \
              --password="{{ dbPassword }}" \
              --primary-host="{{ primaryDb }}" \
              --replication=primary \
              --cluster-node-number=1 \
              --auto-failover
            sleep 1
          done
      register: init_primary_db_rep
      failed_when: init_primary_db.rc > 0
      when: cfme_node_type == 'primary-db'
    - name: wait for the primary datbase to enable replication
      postgresql_query:
        login_host: "{{ primaryDb }}"
        login_password: "{{ dbPassword }}"
        login_user: root
        db: vmdb_production
        query: SELECT node_name FROM repmgr.nodes WHERE node_id = '1';
      register: test_db_rep
      retries: 60
      delay: 10
      until: "test_db_rep.query_result[0].node_name is defined and test_db_rep.query_result[0].node_name == '{{ primaryDb }}'"
      when: cfme_node_type != 'secondary-db'
    - name: initialize secondary database
      become: true
      shell:
        cmd: |
           . /root/.bash_profile
           /opt/rh/cfme-gemset/bin/appliance_console_cli -K "{{ primaryDb }}" -s root -a {{ rootPassword }} --replication=standby --primary-host="{{ primaryDb }}" --standby-host="{{ secondaryDb }}" --cluster-node-number=2 --auto-failover -U root -p "{{ dbPassword }}" -b /dev/vdb || exit 1
      register: init_secondary_db
      failed_when: init_secondary_db.rc > 0
      when: cfme_node_type == 'secondary-db'
    - name: initialize tertiary web-portal
      become: true
      shell:
        cmd: |
           . /root/.bash_profile
           /opt/rh/cfme-gemset/bin/appliance_console_cli -K "{{ primaryDb }}" -s root -a {{ rootPassword }} -h "{{ primaryDb }}" -U root -p "{{ dbPassword }}" -l /dev/vdb || exit 1
      register: init_tertiary_web
      failed_when: init_tertiary_web.rc > 0
      when: cfme_node_type == 'tertiary-web'
    - name: initialize tertiary worker
      become: true
      shell:
        cmd: |
           . /root/.bash_profile
           /opt/rh/cfme-gemset/bin/appliance_console_cli -K "{{ primaryDb }}" -s root -a {{ rootPassword }} -h "{{ primaryDb }}" -U root -p "{{ dbPassword }}" -l /dev/vdb -t /dev/vdc || exit 1
      register: init_tertiary_worker
      failed_when: init_tertiary_worker.rc > 0
      when: cfme_node_type == 'tertiary-worker'
