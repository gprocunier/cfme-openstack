heat_template_version: queens

parameters:

  config_data:
    type: json
    default: {}
  node_bridge:
    type: json
    default: {}
  ipa_enrollment:
    type: json
    default: {}

conditions:

  attach_undercloud:
    equals: [ { get_param: [ node_bridge, extra_nic ] } , True ]
  use_otp:
    equals: [ { get_param: [ ipa_enrollment, { get_param: [ node_bridge, guest_name ] }, name ] }, { get_param: [ node_bridge, guest_name ] } ]
  ssa_host:
    equals: [ { get_param: [ node_bridge, ssa_host ] }, True ]
  cfme_node:
    equals: [ { get_param: [ node_bridge, cfme_node ] }, True ]
  norootpw:
    equals: [ { get_param: [ config_data, root_password ] }, '' ]
  novmdbpw:
    equals: [ { get_param: [ config_data, vmdb_password ] }, '' ]
  cfme_database:
    or:
      - equals: [ { get_param: [ config_data, node_map, { get_param: [ node_bridge, guest_name ] }, type ] }, 'primary-db' ]
      - equals: [ { get_param: [ config_data, node_map, { get_param: [ node_bridge, guest_name ] }, type ] }, 'secondary-db' ]
  has_voltype:
    not:
      equals: [ { get_param: [ node_bridge, voltype ] }, '' ]
  has_ssa_voltype:
    not:
      equals: [ { get_param: [ node_bridge, ssa_voltype ] }, '' ]


resources:

  my_instance_port:
     type: OS::Neutron::Port
     properties:
       network_id:
         get_param: [ node_bridge, private_net_id ]
       fixed_ips:
         - subnet_id: { get_param: [ node_bridge, private_subnet_id ] }
           ip_address: { get_param: [ config_data, { get_param: [ node_bridge, internal_pool_name ] }, { get_param: [ node_bridge, NodeIndex ] } ] }
       security_groups:
         - { get_param: [ node_bridge, secgroup ] }

  undercloud_port:
    type: OS::Neutron::Port
    condition: attach_undercloud
    properties:
      network_id:
        get_param: [ config_data, undercloud_network ]
      security_groups:
        - { get_param: [ node_bridge, secgroup ] }

  my_instance_floating_ip:
     type: OS::Neutron::FloatingIP
     properties:
       floating_network_id:
         get_param: [ node_bridge, public_net_id ]
       port_id:
         get_resource: my_instance_port

  nodeconfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      inputs:
      outputs:
        - name: node-registration-result
      config:
        str_replace:
          template:
            get_param: [ node_bridge, cloudinit ]
          params:
            ___FQDN___:
              get_param: [ node_bridge, guest_name ]
            ___KATELLO_URI___:
              get_param: [ config_data,  rhsm_url ]
            ___RHSM_ORG___:
              get_param: [ config_data, rhsm_org ]
            ___RHSM_KEY___:
              get_param: [ config_data, rhsm_activationkey ]
            ___ROOTPW___:
              if:
                - "norootpw"
                - { get_param: [ node_bridge, root_password ] }
                - { get_param: [ config_data, root_password ] }
            ___DNS_DOMAIN___:
              get_param: [ config_data, ipa_dns_domain ]
            ___IPA_SERVER___:
              get_param: [ config_data, ipa_server ]
            ___IPA_PRINCIPAL___:
              if:
                - "use_otp"
                - ''
                - "--principal={ get_param: [ config_data, ipa_admin_principal ] }"
            ___IPA_PASSWORD___:
              if:
                - "use_otp"
                - { get_param: [ ipa_enrollment, { get_param: [ node_bridge, guest_name ] }, otp ] }
                - { get_param: [ config_data, ipa_admin_password ] }
            ___IPA_REALM___:
              get_param: [ config_data, ipa_realm ]
            ___FLOATING_IP___:
              get_attr: [ my_instance_floating_ip, floating_ip_address ]
            ___ROLE___:
              get_param: [ node_bridge, node_type ]

  mimepayload:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config:
            get_resource: nodeconfig

  roleconfig:
    type: OS::Heat::SoftwareConfig
    condition: cfme_node
    properties:
      group: ansible
      inputs:
        - name: cfme_node_type
        - name: dbPassword
        - name: rootPassword
        - name: primaryDb
        - name: portalNode
        - name: secondaryDb
        - name: debugMode
      outputs:
        - name: result
      config:
        str_replace:
          template:
            get_param: [ node_bridge, roleconfig ]
          params:
            herp: derp
   
  roledeployment:
    type: OS::Heat::SoftwareDeployment
    condition: cfme_node
    depends_on:
      - timedeployment
    properties:
      name: 02_roledeploy
      config:
        get_resource: roleconfig
      server:
        get_resource: my_instance
      input_values:
        debugMode:
          get_param: [ config_data, ansible_nolog ]
        cfme_node_type:
          get_param: [ config_data, node_map, { get_param: [ node_bridge, guest_name ] }, type ]
        dbPassword:
          if:
            - "novmdbpw"
            - { get_param: [ node_bridge, database_password ] }
            - { get_param: [ config_data, vmdb_password ] }
        rootPassword:
          if:
            - "norootpw"
            - { get_param: [ node_bridge, root_password ] }
            - { get_param: [ config_data, root_password ] }
        primaryDb:
          get_param: [ config_data, database_internal_pool, 0 ]
        secondaryDb:
          get_param: [ config_data, database_internal_pool, 1 ]
        portalNode:
          yaql:
            expression: $.data.items().select($[1]).where($.type = 'primary-web').name.join("")
            data:
              get_param: [ config_data, node_map ]
      actions:
        - CREATE

  timeconfig:
    type: OS::Heat::SoftwareConfig
    condition: cfme_node
    properties:
      group: ansible
      inputs:
        - name: timezone
        - name: ntpServers
        - name: debugMode
      outputs:
        - name: result
      config:
        str_replace:
          template:
            get_param: [ node_bridge, timeconfig ]
          params:
            herp: derp

  timedeployment:
    type: OS::Heat::SoftwareDeployment
    condition: cfme_node
    properties:
      # deployments are sorted lexically for execution order
      # we prefix this so it runs first
      name: 01_timedeploy
      config:
        get_resource: timeconfig
      server:
        get_resource: my_instance
      input_values:
        debugMode:
          get_param: [ config_data, ansible_nolog ]
        timezone:
          get_param: [ config_data, timezone ]
        ntpServers:
          get_param: [ config_data, ntpServers ]
      actions:
        - CREATE
        - UPDATE

  evmconfig:
    type: OS::Heat::SoftwareConfig
    condition:
      and:
      - cfme_node
      - not:
          cfme_database
    properties:
      group: ansible
      inputs:
        - name: cfme_node_type
        - name: debugMode
        - name: primaryDb
        - name: dbPassword
        - name: evm_nodeMap
        - name: evm_ntpServers
        - name: evm_smtpDomain
        - name: evm_smtpFrom
        - name: evm_smtpHost
        - name: evm_loginText
        - name: evm_companyName
        - name: evm_timeZone
      outputs:
        - name: result
      config:
        str_replace:
          template:
            get_param: [ node_bridge, evmconfig ]
          params:
            herp: derp


  evmdeployment:
    type: OS::Heat::SoftwareDeployment
    depends_on:
      - roledeployment
    condition:
      and:
      - cfme_node
      - not:
          cfme_database
    properties:
      name: 03_evmdeploy
      config:
        get_resource: evmconfig
      server:
        get_resource: my_instance
      input_values:
        debugMode:
          get_param: [ config_data, ansible_nolog ]
        cfme_node_type:
          get_param: [ config_data, node_map, { get_param: [ node_bridge, guest_name ] }, type ]
        dbPassword:
          if:
            - "novmdbpw"
            - { get_param: [ node_bridge, database_password ] }
            - { get_param: [ config_data, vmdb_password ] }
        rootPassword:
          if:
            - "norootpw"
            - { get_param: [ node_bridge, root_password ] }
            - { get_param: [ config_data, root_password ] }
        primaryDb:
          get_param: [ config_data, database_internal_pool, 0 ]
        evm_nodeCount:
          yaql:
            expression: $.data.cfme_portal_count + $.data.cfme_worker_count
            data:
              get_param: [ config_data, deploy_count ]
        evm_ntpServers:
          get_param: [ config_data, ntpServers ]
        evm_timeZone:
          get_param: [ config_data, evm_timeZone ]
        evm_nodeMap:
          get_param: [ config_data, node_map ]
        evm_companyName:
          get_param: [ config_data, evm_companyName ]
        evm_loginText:
          get_param: [ config_data, evm_loginText ]
        evm_smtpFrom:
          get_param: [ config_data, evm_smtpFrom ]
        evm_smtpHost:
          get_param: [ config_data, evm_smtpHost ]
        evm_smtpDomain:
          get_param: [ config_data, evm_smtpDomain ]
      actions:
        - CREATE
        - UPDATE

  my_instance:
    type: OS::Nova::Server
    depends_on: my_instance_port
    depends_on: my_instance_floating_ip
    depends_on: mimepayload     
    properties:
      name:
        get_param: [ node_bridge, guest_name ]
      image:
        get_param: [ node_bridge, image ]
      flavor:
        get_param: [ node_bridge, flavor ]
      key_name:
        get_param: [ node_bridge, key_name ]
      networks:
        if:
          - "attach_undercloud"
          - - port:
                get_resource: my_instance_port
            - port:
                get_resource: undercloud_port
          - - port:
                get_resource: my_instance_port
      scheduler_hints:
        group:
          get_param: [ node_bridge, server_group ]
      user_data_format: SOFTWARE_CONFIG
      user_data:
        get_resource: mimepayload


  volumes:
    type: OS::Heat::ResourceGroup
    depends_on: my_instance
    properties:
      count:
        get_param: [ node_bridge, volnum ]
      resource_def:
        type:
          get_param: [ config_data, heat_cfme_volumes ]
        properties:
          instance_id:
            get_resource: my_instance
          volsize:
            get_param: [ node_bridge, volsize ]
          voltype:
            if:
              - "has_voltype"
              - { get_param: [ node_bridge, voltype ] }
              - tripleo

  ssa_disk:
    type: OS::Heat::ResourceGroup
    depends_on:
      - my_instance
      - volumes
    condition: ssa_host
    properties:
      count: 1
      resource_def:
        type:
          get_param: [ config_data, heat_cfme_volumes ]
        properties:
          instance_id:
            get_resource: my_instance
          volsize:
            get_param: [ config_data, worker_tmp_vol_size ]
          voltype:
            if:
              - "has_ssa_voltype"
              - { get_param: [ node_bridge, ssa_voltype ] }
              - tripleo
              
  lb:
    type: OS::Heat::ResourceGroup
    depends_on: my_instance
    properties:
      count:
        get_param: [ node_bridge, lbnum ]
      resource_def:
        type:
          get_param: [ config_data, heat_cfme_lb ]
        properties:
          http_pool_id:
            get_param: [ node_bridge, http_pool ]
          https_pool_id:
            get_param: [ node_bridge, https_pool ]
          member_ip:
            get_attr: [ my_instance, first_address ]
          internal_subnet:
            get_param: [ node_bridge, private_subnet_id ]

outputs:
  
  my_instance:
    value:
       get_attr: [ my_instance, show ]

  roledeployment_stdout:
    condition: cfme_node
    value:
      get_attr: [ roledeployment, deploy_stdout ]

  roledeployment_stderr:
    condition: cfme_node
    value:
      get_attr: [ roledeployment, deploy_stderr ]

  roledeployment_rc:
    condition: cfme_node
    value:
      get_attr: [ roledeployment, deploy_status_code ]